var fs = require("fs");
var path = require('path');
var http = require("http");
var async = require('async');
var crypto = require('crypto');
var moment = require('moment');
var exec = require('child_process').exec;

module.exports = Config = require('../Config');


/*
 StringUtil 工具类
 */
module.exports = StringUtil = {
    YYYYMMddHHMMSS: 'YYYY-MM-DD HH:mm:ss',
    trim: function (s) {  //删除左右空格
        if (typeof(s) == 'string') {
            return s.replace(/^\s*|\s*$/g, "");
        }
        return '' + s;
    },
    isNull: function (s) { //判断是否为空
        return typeof(s) == 'undefined' || !s || s == null || s == '';
    },
    isEmpty: function (s) { //判断是否为空字符串
        return typeof(s) == 'undefined' || !s || s == null || this.trim(s) == '';
    },
    getRandString: function (len) { //获取随机字符串
        var a = "", b = "abcdefghjkmnpqrstuvwxyz0123456789ABCDEFGHJKMNPQRSTUVWXYZ", c = b.length;
        for (var i = 0; i < len; i++) {
            a += b.charAt(Math.floor(Math.random() * c));
        }
        return a;
    },
    getRandNumber: function (len) { //获取随机数字
        var a = "", b = "0123456789", c = b.length;
        for (var i = 0; i < len; i++) {
            a += b.charAt(Math.floor(Math.random() * c));
        }
        return a;
    },
    getRandLetter: function (len) { //获取随机字母
        var a = "", b = "abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ", c = b.length;
        for (var i = 0; i < len; i++) {
            a += b.charAt(Math.floor(Math.random() * c));
        }
        return a;
    },
    getId: function () { //获取ID
        return Config.server.hostKey + new Date().getTime() + this.getRandString(10);
    },
    isInt: function (s) { //判断是否为数字
        if (!s || s.length == 0) return false;
        for (var i = 0; i < s.length; i++) {
            if ('1234567890'.indexOf(s.charAt(i)) < 0) {
                return false;
            }
        }
        return true;
    },
    getInt: function (s, defaultValue) { //获取数字
        return this.isInt(s) ? parseInt(s) : defaultValue;
    },
    getSqlWhere0: function (param) { //拼接查询sql
        var s = '';
        if (param && param.keys.length > 0) {
            for (var i = 0; i < param.keys.length; i++) {
                if (param.keys[i].indexOf('=') < 0) {
                    s += ' and ' + param.keys[i] + '=?';
                } else {
                    s += ' ' + param.keys[i];
                }
            }
        }
        return s;
    },
    getSqlWhere2: function (param, begin, end, tag) { //拼接查询sql
        var s = begin;
        if (param && param.length > 0) {
            for (var i = 0; i < param.length; i++) {
                s += tag;
            }
        }
        s += end;
        return s;
    },
    getSqlWhere: function (param) { //拼接查询sql
        var s = '';
        if (param && param.length > 0) {
            for (var i = 0; i < param.length; i++) {
                var o = param[i];
                if (o.name && o.name != "-") {
                    s += ' and ' + o.name + o.sqlValue;
                } else {
                    s += ' ' + o.sqlValue;
                }
            }
        }
        return s;
    },
    addParam: function (list, req, name, type, sqlValue) { //添加参数
        var s = this.getParam(req, name, "");
        if (!this.isEmpty(s)) {
            list.push({name: name, type: type, value: s, sqlValue: sqlValue});
        }
    },
    getSqlValues: function (param) { //获取sql的对应值
        var s = [];
        if (param && param.length > 0) {
            for (var i = 0; i < param.length; i++) {
                var o = param[i];
                if (!this.isEmpty(o.name)) {
                    if (o.type == 'like') {
                        s.push("%" + o.value + "%");
                    } else {
                        s.push(o.value);
                    }
                }
            }
        }
        return s;
    },
    getSqlOrder: function (sql, row, orderBy, orderValue) { //获取排序 sql
        if (!this.isEmpty(orderBy)) {
            sql += " order by " + orderBy;
            if (!this.isEmpty(orderValue)) {
                sql += " " + orderValue;
            }
        }
        if (row && row > 0) {
            sql += " limit " + row;
        }
        return sql;
    },
    getParam: function (req, name, defaultValue) { //获取参数值
        var s = req.body[name];
        if (typeof(s) == 'undefined') {
            s = req.params[name];
        }
        if (typeof(s) == 'undefined') {
            s = req.query[name];
            if (typeof(defaultValue) == 'number') {
                if (this.isEmpty(s)) {
                    s = defaultValue;
                } else {
                    s = parseFloat(s);
                    if (isNaN(s)) {
                        s = defaultValue;
                    }
                }
            }
        }
        if (typeof(s) == 'undefined') {
            s = defaultValue;
        }
        return s;
    },
    splits: function (txt, flag, filter, isTrim, isUnique, includeText) { //分割字符串
        if (this.isEmptytxt) {
            return null;
        }
        if (!flag || flag == "") {
            return [txt];
        }
        var startIdx = 0, idxOld = 0, list = [], len = flag.length, len2 = txt.length, s = null;
        while ((idxOld = txt.indexOf(flag, startIdx)) >= 0) {
            s = txt.substring(startIdx, idxOld);
            if (isTrim) {
                s = this.trim(s);
            }
            if (filter != null) {
                if (s == filter) {
                    startIdx = idxOld + len;
                    continue;
                }
            }
            if (includeText && includeText != "") {
                if (s.indexOf(includeText) == -1) {
                    startIdx = idxOld + len;
                    continue;
                }
            }
            if (isUnique) {
                if (list.indexOf(s) == -1) {
                    list.push(s);
                }
            } else {
                list.push(s);
            }
            startIdx = idxOld + len;
        }
        if (startIdx < len2) {
            s = txt.substring(startIdx);
            if (isTrim) {
                s = this.trim(s);
            }
            if (filter != null) {
                if (s == filter) {
                    s = null;
                }
            }
            if (s != null) {
                if (isUnique) {
                    if (list.indexOf(s) == -1) {
                        list.push(s);
                    }
                } else {
                    list.push(s);
                }
            }
        }
        return list;
    },
    getText: function (txt, begin, end, defaultValue, fromEnd) { //获取字符串
        var s = null;
        if (!this.isEmpty(txt)) {
            var i = 0;
            if (!this.isEmpty(begin)) {
                i = txt.indexOf(begin);
            }
            if (i != -1) {
                var j = txt.length;
                if (!this.isEmpty(end)) {
                    if (fromEnd) {
                        j = txt.lastIndexOf(end);
                    } else {
                        j = txt.indexOf(end, i + begin.length);
                    }
                }
                if (j != -1) {
                    if (!begin) {
                        s = this.trim(txt.substring(j + 1));
                    } else {
                        s = this.trim(txt.substring(i + begin.length, j));
                    }
                }
            }
        }
        if (s == null) {
            s = defaultValue;
        }
        return s;
    },
    getTitle: function (s, len, ext) { // 截取标题
        if (StringUtil.isEmpty(s)) {
            s = "";
        } else {
            if (len > 0) {
                if (StringUtil.isNull(ext)) {
                    ext = "";
                }
                if (s.length > len) {
                    s = s.substring(0, len) + ext;
                }
            }
        }
        return s;
    },
    getHtmlText: function (s, len, ext) { //获取html text
        if (StringUtil.isEmpty(s)) {
            s = "";
        } else {
            s = s.replace(/<[^>].*?>/g, "");
            s = s.replace(/[ \r\n\t ]/g, " ");
            s = s.replace(/\s+/g, " ");
            s = StringUtil.trim(s);
            s = StringUtil.getTitle(s, len, ext);
        }
        return s;
    },
    getArray: function (start, end) { //获取数组
        var o = [];
        for (var i = start; i <= end; i++) {
            o.push(i);
        }
        return o;
    },
    getKeyValues: function (txt, tag1, tag2) { //获取value
        if (txt && tag1 && tag2) {
            var a = StringUtil.splits(txt, tag1, "", true, true), o = [];
            if (a) {
                for (var i = 0; i < a.length; i++) {
                    var b = this.getKeyValue(a[i], tag2);
                    if (b) {
                        o.push(b);
                    }
                }
            }
            if (o.length > 0) return o;
        }
        return false;
    },
    getKeyValue: function (txt, tag) { //获取value
        if (txt && tag) {
            var i = txt.indexOf(tag);
            if (i != -1) {
                return {"label": this.trim(txt.substring(0, i)), "value": this.trim(txt.substring(i + tag.length))};
            }
        }
        return false;
    },
    getDate: function (date) { //获取日期
        var t = typeof(date);
        if (t == 'string') {
            date = date.replace(/-/g, "/");
            date = new Date(date);
        } else if (t == 'number') {
            date = new Date(date);
        } else if (t != 'object' || !date) {
            date = null;
        }
        return date;
    },
    toHex: function (txt) { // to hex
        var s = "";
        if (!StringUtil.isEmpty(txt)) {
            for (var i = 0; i < txt.length; i++) {
                s += txt.charCodeAt(i).toString(16);
            }
        }
        return s;
    },
    getDateString: function (date, format) { //获取日期
        if (!format) format = this.YYYYMMddHHMMSS;
        if (!date) date = new Date();
        var o = {
            "M+": date.getMonth() + 1,                 //月份
            "d+": date.getDate(),                    //日
            "D+": date.getDate(),                    //日
            "h+": date.getHours(),                   //小时
            "H+": date.getHours(),                   //小时
            "m+": date.getMinutes(),                 //分
            "s+": date.getSeconds(),                 //秒
            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
            "S": date.getMilliseconds()             //毫秒
        };
        if (/(y+)/.test(format) || /(Y+)/.test(format)) {
            format = format.replace(RegExp.$1, (date.getFullYear().toString()).substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return format;
    },
    print: function () { //打印
        if (arguments) {
            for (var i = 0; i < arguments.length; i++) {
                console.log("[" + i + "]=[" + JSON.stringify(arguments[i]) + "]");
            }
        }
    },
    error: function () {//打印错误
        if (arguments) {
            for (var i = 0; i < arguments.length; i++) {
                console.error(arguments[i]);
            }
        }
    },
    isBoolean: function (o) { //是否boolean
        return Object.prototype.toString.call(o) === "[object Boolean]";
    },
    isArray: function (o) { //是否array
        return Object.prototype.toString.call(o) === '[object Array]';
    },
    isJsonObj: function (o) { //是否json
        return Object.prototype.toString.call(o) === '[object Object]';
    },
    isJsonObjArray: function (o) { //是否json array
        if (this.isArray(o) && o.length > 0) {
            for (var i = 0; i < o.length; i++) {
                if (!this.isJsonObj(o[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    },
    getArrayFromJsonObj: function (keys, obj) { //从json对象转成array
        var r = [];
        if (keys && obj) {
            for (var i = 0; i < keys.length; i++) {
                r.push(obj[keys[i]]);
            }
        }
        return r;
    },
    getArraysFromJsonObj: function (keys, objs) { //从json对象转成array
        var r = [];
        if (keys && objs) {
            for (var i = 0; i < objs.length; i++) {
                r.push(this.getArrayFromJsonObj(keys, objs[i]));
            }
        }
        return r;
    },
    toCharArray: function (s) { //转成字符串数组
        var a = [];
        if (s && s != "") {
            for (var i = 0; i < s.length; i++) {
                a.push(s.charAt(i));
            }
        }
        return a;
    },
    getStringFromArray: function (o, flag) { //从数组转成字符串
        var s = "";
        if (this.isArray(o)) {
            if (this.isJsonObjArray(o)) {
                s = JSON.stringify(o);
            } else {
                if (typeof(flag) == "undefined" || typeof(flag) == "boolean") {
                    s = JSON.stringify(o);
                } else {
                    for (var i = 0; i < o.length; i++) {
                        s += o[i];
                    }
                }
            }
        }
        return s;
    },
    getString: function (txt, defaultValue, isTrim) { //获取字符串
        if (typeof(defaultValue) == "undefined") {
            defaultValue = "";
        }
        if (typeof(isTrim) == "undefined") {
            isTrim = true;
        }
        if (typeof(txt) == "string") {
            if (txt != "" && isTrim) {
                txt = txt.trim();
            }
            return txt;
        } else if (typeof(txt) == "undefined" || txt == null) {
            return defaultValue;
        } else {
            return "" + txt;
        }
    },
    clone: function (o) { //复制对象
        if (o && this.isJsonObj(o)) {
            var rs = {};
            for (var key in o) {
                rs[key] = o[key];
            }
            return rs;
        } else {
            return o;
        }
    },
    checkProperties: function (o, columns) { //检查属性
        if (o && this.isJsonObj(o)) {
            var rs = {};
            for (var key in o) {
                if (this.hasProperty(key, columns)) {
                    rs[key] = o[key];
                }
            }
            return rs;
        }
        return o;
    },
    hasProperty: function (key, columns) { //判断是否有属性
        if (key && columns) {
            var len = columns.length;
            for (var i = 0; i < len; i++) {
                if (key == columns[i].name) {
                    return true;
                }
            }
        }
        return false;
    },
    toThousands: function (input) {
        if (!input || input == '') {
            return '0.00';
        }
        input = Number(input).toFixed(2).toString();
        var result;
        var int = '';//整数部分
        var decimal = '';//小数部分
        if (input.indexOf(".") >= 0) {
            decimal = input.split('.')[1];
            int = input.split('.')[0];
        } else {
            int = input;
        }
        var int_result = '';
        while (int.length > 3) {
            int_result = ',' + int.slice(-3) + int_result;
            int = int.slice(0, int.length - 3);
        }
        if (int) {
            int_result = int + int_result;
        }
        if (decimal.length == 0) {
            decimal = '00'
        }
        result = int_result + '.' + decimal;
        return result;
    },
    checkSign: function (obj, key, sign) {
        var md5 = function (str) {//获取参数
            var sign = crypto.createHash('md5').update(str, 'utf8').digest("hex").toUpperCase();
            console.log("sign===" + sign);
            return sign
        };

        var combo = function (obj, key) {
            var keys = Object.keys(obj);
            keys = keys.sort();
            var str = [];
            keys.forEach(function (objkey) {
                if (obj[objkey]) {
                    str.push(objkey + "=" + obj[objkey])
                }
            });
            str = str.join('&');
            console.log(str);
            str = str + "&key=" + key
            console.log(str);
            return str;
        }

        return md5(combo(obj, key)) === sign

    },
    getOrderId: function () {
        return moment().format('YYYYMMDDHHmm') + StringUtil.getRandString(5);
    },
    toNumberFix: function (str) {
        if (isNaN(str)) {
            return '0.00'
        }
        return Number(str).toFixed(2);
    },
    /**
     * 版本号比较方法
     * 传入两个字符串，当前版本号：curV；比较版本号：reqV
     * 调用方法举例：compare("1.1","1.2")，将返回false
     */
    compare: function (curV, reqV) {
        if (curV && reqV) {
            //将两个版本号拆成数字
            var arr1 = curV.split('.'),
                arr2 = reqV.split('.');
            var minLength = Math.min(arr1.length, arr2.length),
                position = 0,
                diff = 0;
            //依次比较版本号每一位大小，当对比得出结果后跳出循环（后文有简单介绍）
            while (position < minLength && ((diff = parseInt(arr1[position]) - parseInt(arr2[position])) == 0)) {
                position++;
            }
            diff = (diff != 0) ? diff : (arr1.length - arr2.length);
            //若curV大于reqV，则返回true
            return diff > 0;
        } else {
            //输入为空
            console.log("版本号不能为空");
            return false;
        }
    },
};


module.exports = PaginationObj = function PaginationObj(currPage, pageSize, pageNum, totalRow) {

    this.currPage = currPage;
    this.pageSize = pageSize;
    this.pageNum = pageNum;
    this.totalRow = totalRow;
    this.startPage = 0;
    this.endPage = 0;
    this.hasPrevious = false;
    this.hasNext = false;
    this.isFirst = false;
    this.isLast = false;
    this.totalPage = 0;
    this.data = [];
    this.startRow = 0;
    this.endRow = 0;

    this.checkParams = function () { //检查参数
        if (this.currPage < 1) {
            this.currPage = 1;
        }
        this.totalPage = Math.floor(this.totalRow / this.pageSize) + ((this.totalRow % this.pageSize) > 0 ? 1 : 0);
        this.startPage = Math.ceil(this.currPage / this.pageNum - 1) * this.pageNum + 1;
        this.endPage = this.startPage + this.pageNum - 1;
        if (this.endPage >= this.totalPage) {
            this.endPage = this.totalPage;
            this.hasNext = false;
        } else {
            this.hasNext = true;
        }
        if (this.startPage > this.pageNum) {
            this.hasPrevious = true;
        } else {
            this.hasPrevious = false;
        }
        if (this.currPage > this.pageNum) {
            this.isFirst = false;
        } else {
            this.isFirst = true;
        }
        if (this.endPage >= this.totalPage) {
            this.isLast = true;
        } else {
            this.isLast = false;
        }
        this.startRow = (this.currPage - 1) * this.pageSize;
        this.endRow = this.pageSize;
        this.pages = [];
        for (var i = this.startPage; i <= this.endPage; i++) {
            this.pages.push(i);
        }
    };

    this.setParams = function (debug, sql, sqlCount, sqlParam) { //设置参数
        if (debug) {
            this.sql = sql;
            this.sqlCount = sqlCount;
            this.sqlParam = sqlParam;
        }
        this.status = true;
    };

    this.checkParams();

};


module.exports = DB = {
    pool: false,
    debug: false,
    getPool: function () { //获取连接池
        if (!this.pool) {
            this.pool = require('mysql').createPool({
                //connectionLimit: Config.db.connectionLimit, //important
                host: Config.db.host,
                user: Config.db.user,
                password: Config.db.password,
                database: Config.db.database
            });
            this.debug = Config.debug
        }
        return this.pool;
    },
    query: function (paramObj) { //执行SQL
        var that = this;
        return new Promise((resolve) => {
            that.exec({
                sql: paramObj.sql,
                param: paramObj.param,
                callback: function (result) {
                    resolve(result);
                }
            })
        })
    },
    exec: function (paramObj) { //执行SQL
        var that = this;
        var sql2 = StringUtil.trim(paramObj.sql).toLowerCase();
        if (paramObj.page && sql2.indexOf("select ") != -1) {
            var param1 = {
                sql: paramObj.sqlCount, param: paramObj.param, callback: function (rs) {
                    var totalRow = 0;
                    if (rs.status) {
                        totalRow = rs.data;
                    }
                    var pageObj = new PaginationObj(paramObj.page.currPage, paramObj.page.pageSize, paramObj.page.pageNum, totalRow);
                    if (totalRow > 0) {
                        var sql = paramObj.sql + " limit " + pageObj.startRow + "," + pageObj.pageSize;
                        var param2 = {
                            sql: sql, param: paramObj.param, callback: function (rs2) {
                                rs2.sqlCount = paramObj.sqlCount;
                                if (rs2.status) {
                                    pageObj.data = rs2.data;
                                    rs2.data = pageObj;
                                    rs2.row = pageObj.data ? pageObj.data.length : 0;
                                    if (paramObj.callback) {
                                        paramObj.callback(rs2);
                                    }
                                } else {
                                    if (paramObj.callback) {
                                        paramObj.callback(rs2);
                                    }
                                }
                            }
                        };
                        that.execSql(param2);
                    } else {
                        rs.sqlCount = paramObj.sqlCount;
                        rs.sql = paramObj.sql;
                        rs.data = pageObj;
                        rs.row = 0;
                        paramObj.callback(rs);
                    }
                }
            };
            that.execSql(param1);
        } else if (sql2.indexOf("insert ") != -1 && StringUtil.isJsonObjArray(paramObj.param)) {
            if (sql2.indexOf(" set ") != -1) { //set 只支持单个json对象，json对象数组需要 async.forEach
                var rs = {status: false, error: null, data: [], row: 0, sql: paramObj.sql, param: paramObj.param},
                    i = 0, len = paramObj.param.length;
                async.forEach(paramObj.param, function (item, callback) {
                    var param2 = {
                        sql: paramObj.sql, param: item, callback: function (results) {
                            ++i;
                            if (results.status) {
                                rs.status = true;
                                rs.row++;
                            } else {
                                rs.error = results.error;
                            }
                            rs.data.push(results.data);
                            if (i == len) {
                                callback(rs);
                            }
                        }
                    };
                    that.execSql(param2);
                }, function (results) {
                    paramObj.callback(rs);
                });
            } else {
                var keys = StringUtil.splits(StringUtil.getText(paramObj.sql, "(", ")", false), ",", "", true, false);
                var values = StringUtil.getArraysFromJsonObj(keys, paramObj.param);
                paramObj.paramOld = paramObj.param;
                paramObj.param = [values];
                that.execSql(paramObj);
            }
        } else {
            that.execSql(paramObj);
        }
    },
    execAsync: function (paramObj) {
        return new Promise(((resolve) => {
            this.exec({
                ...paramObj, callback: (result) => {
                    if (result.status) {
                        resolve([null, result.data, result]);
                    } else {
                        resolve([new Error('system_error'), null, result]);
                    }
                }
            });
        }));
    },
    execSql: function (paramObj) { //执行SQL
        var that = this;
        var rs = {
            status: false,
            error: null,
            data: null,
            row: 0,
            sql: paramObj.sql,
            param: paramObj.param,
            paramOld: paramObj.paramOld
        };
        this.getPool().getConnection(function (err, conn) {
            if (err) {
                if (conn) conn.release();
                rs.error = err;
                StringUtil.error(paramObj, err, err.stack);
                paramObj.callback(rs);
            } else {
                conn.query(rs.sql, rs.param, function (err, rows) {
                    if (conn) conn.release();
                    if (paramObj.callback) {
                        if (err) {
                            rs.error = err;
                            StringUtil.error(paramObj, err, err.stack);
                            paramObj.callback(rs);
                        } else {
                            rs.status = true;
                            var sql2 = StringUtil.trim(rs.sql).toLowerCase();
                            if (sql2.indexOf("select ") != -1 || sql2.indexOf("show ") != -1) {
                                var c = sql2.substring(7).trim();
                                if (c.indexOf("count(") == 0) {
                                    rs.data = 0;
                                    if (rows && rows.length == 1) {
                                        for (var x in rows[0]) {
                                            rs.data = rows[0][x];
                                            break;
                                        }
                                    }
                                    rs.row = rs.data;
                                } else {
                                    rs.data = rows;
                                    rs.row = (rs.data ? rs.data.length : 0);
                                }
                            } else if (sql2.indexOf("insert ") != -1) {
                                rs.data = rows.insertId;
                                rs.row = (rs.data ? 1 : 0);
                            } else {
                                rs.row = rows.affectedRows;
                            }
                            paramObj.callback(rs);
                        }
                    }
                });
            }
        });
    },
    test: function () { //执行测试SQL
        var that = this;
        var param = {
            sql: "show tables", param: null, callback: function (rs) {
                console.log("Config=" + JSON.stringify(Config));
                if (rs.status) {
                    var tables = [];
                    for (var i = 0; i < rs.data.length; i++) {
                        var obj = rs.data[i];
                        for (var key in obj) {
                            tables.push(obj[key]);
                        }
                    }
                    console.log("database connect test is ok. \nshow tables: " + JSON.stringify(tables));
                } else {
                    console.log("database connect test is failed. \nError " + JSON.stringify(rs.error));
                }
            }
        };
        this.exec(param);
    }
};

module.exports = DBV2 = {
    pool: false,
    debug: false,
    getPool: function () { //获取连接池
        if (!this.pool) {
            this.pool = require('mysql').createPool({
                //connectionLimit: Config.db.connectionLimit, //important
                host: Config.db.host,
                user: Config.db.user,
                password: Config.db.password,
                database: Config.db.database
            });
            this.debug = Config.debug
        }
        return this.pool;
    },
    beginTransaction: function (...paramObjs) {
        let rs = {status: false, error: null, execs: []};
        return new Promise(resolve => {
            this.getPool().getConnection((err, conn) => {
                if (err) {
                    rs.error = err;
                    resolve(rs);
                } else {
                    conn.beginTransaction(async err2 => {
                        if (err2) {
                            if (conn) conn.release();
                            rs.error = err2;
                            resolve(rs);
                        } else {
                            for (let i = 0; i < paramObjs.length; i++) {
                                let paramObj = paramObjs[i];

                                let rs3 = await this.exec(paramObj, conn);
                                rs.execs.push(rs3);

                                if (rs3.error) {
                                    rs.error = rs3.error;
                                    break;
                                }
                            }

                            if (rs.error) {
                                conn.rollback(() => {
                                    if (conn) conn.release();
                                    resolve(rs);
                                });
                            } else {
                                conn.commit(err3 => {
                                    if (err3) {
                                        rs.error = err3;
                                        conn.rollback(() => {
                                            if (conn) conn.release();
                                            resolve(rs);
                                        });
                                    } else {
                                        if (conn) conn.release();
                                        rs.status = true;
                                        resolve(rs);
                                    }
                                })
                            }
                        }
                    })
                }
            });
        });
    },
    execSql: function (paramObj, conn) { //执行SQL
        let isNewConn = !conn;//是否为新连接，用于是否主动释放连接

        let rs = {
            status: false,
            error: null,
            data: null,
            row: 0,
            sql: paramObj.sql,
            param: paramObj.param,
            paramOld: paramObj.paramOld
        };

        return new Promise(resolve => {
            let callback = (err, conn) => {
                if (err) {
                    if (conn && isNewConn) conn.release();
                    rs.error = err;
                    StringUtil.error(paramObj, err, err.stack);
                    resolve(rs);
                } else {
                    conn.query(rs.sql, rs.param, function (err, rows) {
                        if (conn && isNewConn) conn.release();
                        if (err) {
                            rs.error = err;
                            StringUtil.error(paramObj, err, err.stack);
                            resolve(rs);
                        } else {
                            rs.status = true;
                            var sql2 = StringUtil.trim(rs.sql).toLowerCase();
                            if (sql2.indexOf("select ") != -1 || sql2.indexOf("show ") != -1) {
                                var c = sql2.substring(7).trim();
                                if (c.indexOf("count(") == 0) {
                                    rs.data = 0;
                                    if (rows && rows.length == 1) {
                                        for (var x in rows[0]) {
                                            rs.data = rows[0][x];
                                            break;
                                        }
                                    }
                                    rs.row = rs.data;
                                } else {
                                    rs.data = rows;
                                    rs.row = (rs.data ? rs.data.length : 0);
                                }
                            } else if (sql2.indexOf("insert ") != -1) {
                                rs.data = rows.insertId;
                                rs.row = (rs.data ? 1 : 0);
                            } else {
                                rs.row = rows.affectedRows;
                            }
                            resolve(rs);
                        }
                    });
                }
            };
            if (conn) {
                callback(null, conn);
            } else {
                this.getPool().getConnection(callback);
            }
        });
    },
    exec: async function (paramObj, conn) { //执行SQL
        let sql2 = StringUtil.trim(paramObj.sql).toLowerCase();
        if (paramObj.page && sql2.indexOf("select ") != -1) {
            let rs = await this.execSql({sql: paramObj.sqlCount, param: paramObj.param}, conn);

            let totalRow = 0;
            if (rs.status) {
                totalRow = rs.data;
            }
            let pageObj = new PaginationObj(paramObj.page.currPage, paramObj.page.pageSize, paramObj.page.pageNum, totalRow);
            if (totalRow > 0) {
                let sql = paramObj.sql + " limit " + pageObj.startRow + "," + pageObj.pageSize;

                let rs2 = await this.execSql({sql: sql, param: paramObj.param}, conn);
                rs2.sqlCount = paramObj.sqlCount;
                if (rs2.status) {
                    pageObj.data = rs2.data;
                    rs2.data = pageObj;
                    rs2.row = pageObj.data ? pageObj.data.length : 0;
                    return rs2;
                } else {
                    return rs2;
                }
            } else {
                rs.sqlCount = paramObj.sqlCount;
                rs.sql = paramObj.sql;
                rs.data = pageObj;
                rs.row = 0;
                return rs;
            }
        } else if (sql2.indexOf("insert ") != -1 && StringUtil.isJsonObjArray(paramObj.param)) {
            if (sql2.indexOf(" set ") != -1) { //set 只支持单个json对象，json对象数组需要 async forEach
                let rs = {status: false, error: null, data: [], row: 0, sql: paramObj.sql, param: paramObj.param};

                for (let i = 0; i < rs.param.length; i++) {
                    let item = rs.param[i];

                    let results = await this.execSql({sql: paramObj.sql, param: item}, conn);
                    if (results.status) {
                        rs.status = true;
                        rs.row++;
                    } else {
                        rs.error = results.error;
                    }
                    rs.data.push(results.data);
                }

                return rs;
            } else {
                var keys = StringUtil.splits(StringUtil.getText(paramObj.sql, "(", ")", false), ",", "", true, false);
                var values = StringUtil.getArraysFromJsonObj(keys, paramObj.param);
                paramObj.paramOld = paramObj.param;
                paramObj.param = [values];
                return await this.execSql(paramObj, conn);
            }
        } else {
            return await this.execSql(paramObj, conn);
        }
    },
    test: async function () { //执行测试SQL
        console.log("Config=" + JSON.stringify(Config));

        let result = await this.exec({sql: "DROP TABLE IF EXISTS `cine_test`;"});
        console.log("drop cine-test. \nresult: " + JSON.stringify(result));

        result = await this.exec({sql: "CREATE TABLE `cine_test` (`id` int(11) unsigned NOT NULL AUTO_INCREMENT, `name` varchar(22) COLLATE utf8_bin DEFAULT NULL, `age` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin; "});
        console.log("create cine-test. \nresult: " + JSON.stringify(result));

        /////////  insert
        result = await this.exec({sql: "insert into cine_test set ? ", param: [{name: 'zhangsan'}, {name: 'lisi'}]});
        console.log("insert into xxx set test. \nresult: " + JSON.stringify(result));
        result = await this.exec({
            sql: "insert into cine_test (name) values ? ",
            param: [{name: 'wangwu'}, {name: 'zhaosi'}]
        });
        console.log("insert into xxx values (xxx),(xxx) test. \nresult: " + JSON.stringify(result));
        result = await this.exec({sql: "insert into cine_test (name) values (?) ", param: ['qianwu']});
        console.log("insert into xxx values (xxx) test. \nresult: " + JSON.stringify(result));

        ///////// select
        result = await this.exec({sql: "select * from cine_test "});
        console.log("select xxx test. \nresult: " + JSON.stringify(result));
        result = await this.exec({
            sql: "select * from cine_test",
            sqlCount: "select count(*) from cine_test",
            param: [],
            page: {currPage: 2, pageSize: 10, pageNum: 10}
        })
        console.log("select xxx page test. \nresult: " + JSON.stringify(result));

        ///////// 事务回归
        result = await this.beginTransaction({sql: "update cine_test set name = 'test'"}, {sql: "select * from cine_tests"})
        console.log("transaction test. \nresult: " + JSON.stringify(result));
    }
};

module.exports = SessionUtil = {

    // load:function(req){ //加载session
    //     var session = req.session;
    //     session.lastVisitAt=new Date();
    //     session.lastVisitUrl=req.url+(req.url.query?('?'+req.url.query):'');
    //     session.count = session.count || 0;
    //     session.count++;
    //     console.log('sessionId='+session.id+', userId='+SessionUtil.getUserId(req)+', session='+JSON.stringify(session));
    //     //return SessionUtil.getUserObj(req);
    //     return session;
    // },
    getUserObj: function (req) { //获取用户对象
        if (!req.session || !req.session.userSession) {
            return {"id": 0, "login": ""};
        }
        return req.session.userSession;
    },
    getSessionId: function (req) { //获取session id
        return req.session ? req.session.id : "";
    },
    saveUserObj: function (req, user) { //保存对象
        req.session.userSession = user;
    },
    saveImageCode: function (req, imgcode) { //保存图片验证码
        req.session.imgcode = imgcode;
    },
    getImageCode: function (req) { //获取图片验证码
        return req.session.imgcode;
    },
    saveMobileCode: function (req, mobilecode) { //保存手机验证码
        req.session.mobilecode = mobilecode;
    },
    getMobileCode: function (req) { //获取手机验证码
        return req.session.mobilecode;
    },
    /**
     * 清Session
     * 所有存在Session中的数据，登出必须清除
     */
    clearSession: function (req, callback) {//清除session
        // if (req && req.session) {
        // if (req.session.userSession) {
        //     delete req.session.userSession
        // }
        // if (req.session.menuAccess) {
        //     delete req.session.menuAccess
        // }
        // if (req.session.wechat_redirect) {
        //     delete req.session.wechat_redirect
        // }
        req.session.destroy(function () {
            callback && callback()
        })
        // }
    },
    getUserId: function (req) { //获取用户 id
        return this.getUserObj(req).id;
    },
    getIp: function (req) { //获取ip
        return req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    },
    getUserAgent: function (req) { //获取浏览器
        return req.headers['user-agent'];
    },
    getReferer: function (req) { //获取上一个来源网址
        return req.headers['Referer'];
    }
};

module.exports = CookieUtil = {
    setToken: function (res, value) {
        CookieUtil.set(res, 'token', value, {maxAge: Config.cookie.max_age})
    },
    getToken: function (req) {
        return CookieUtil.get(req, 'token');
    },
    removeToken: function (res) {
        CookieUtil.remove(res, 'token')
    },
    set: function (res, key, value, options) {
        // options = {maxAge: Config.cookie.max_age}
        res.cookie(key, value, options)
    },
    get: function (req, key) {
        return req.cookies[key]
    },
    remove: function (res, key) {
        res.clearCookie(key)
    }
}

module.exports = FileUtil = {
    readFile: function (filepath, encoding, callback) {//读取文件
        fs.readFile(filepath, StringUtil.isEmpty(encoding) ? 'utf-8' : encoding, function (err, data) {
            callback(err, data);
        });
    },
    readFileSync: function (filepath, encoding) {//读取文件
        return fs.readFileSync(filepath, StringUtil.isEmpty(encoding) ? 'utf-8' : encoding);
    },
    createFolderSync: function (dirpath, mode) {//创建目录
        if (!fs.existsSync(dirpath)) {
            var pathtmp;
            var dirs = StringUtil.splits(dirpath, '/', false, false, null);
            console.log(dirs);
            dirs.forEach(function (dirname) {
                if (pathtmp) {
                    pathtmp = path.join(pathtmp, dirname);
                }
                else {
                    if (path.sep == '\\') {
                        pathtmp = dirname + path.sep;
                    } else {
                        pathtmp = path.sep + dirname;
                    }

                    console.log(pathtmp);
                }
                if (!fs.existsSync(pathtmp)) {
                    if (!fs.mkdirSync(pathtmp, mode)) {
                        return false;
                    }
                }
            });
        }
        return true;
    },
    getAllFolders: function (path) { //获取所有目录
        var dirList = [];
        if (!fs.existsSync(path)) {
            console.error("The folder doesn't exist, please check folder: " + path);
            return dirList;
        }
        this.listFolder(path, dirList);
        return dirList;
    },
    listFolder: function (path, dirList) { //列出目录
        var dir = fs.readdirSync(path), that = this;
        dirList.push(path);
        dir.forEach(function (item) {
            if (fs.statSync(path + '/' + item).isDirectory()) {
                dirList.push(path + '/' + item);
                that.listFolder(path + '/' + item, dirList);
            }
        });
    }
};


module.exports = SpiderUtil = {

    wget: function (url, saveToPath) {  //get请求
        try {
            http.get(url, function (res) {
                var s = "";
                res.setEncoding("binary");
                res.on("data", function (chunk) {
                    s += chunk;
                });
                res.on("end", function () {
                    if (saveToPath && saveToPath != "") {
                        fs.writeFile(saveToPath, s, "binary", function (err) {
                        });
                    }
                });
            }).on("error", function (e1) {

            });
        } catch (e) {

        }
    }
};


module.exports = TableUtil = {

    SELECT_OPTION_PREFIX: ["", "　└", "　　└", "　　　└", "　　　　└", "　　　　　└", "　　　　　　└"],
    getColumns: function (obj, txt) {//获取所有列
        if (obj && !StringUtil.isEmpty(txt)) {
            var s = StringUtil.splits(txt, ",", "", true, true, null), a = [];
            for (var i = 0; i < s.length; i++) {
                a.push(this.getColumn(obj, s[i]));
            }
            return a;
        }
        return false;
    },
    getLeftRightColumns: function (columns, txt) {//获取左侧列
        if (!StringUtil.isEmpty(txt)) {
            columns = this.getColumns(columns, txt);
        }
        var rs = {left: [], right: []};
        if (!columns || columns.length < 1) {
            return rs;
        }
        var len = columns.length, left = Math.ceil(len / 2), right = len - left;
        for (var i = 0; i < columns.length; i++) {
            if (i < left) {
                rs.left.push(columns[i]);
            } else {
                rs.right.push(columns[i]);
            }
        }
        return rs;
    },
    getColumn: function (obj, name) { //获取某一列
        for (var i = 0; i < obj.columns.length; i++) {
            if (obj.columns[i].name == name) {
                return obj.columns[i];
            }
        }
        return false;
    },
    hasColumn: function (obj, name, isEqual) { //是否有某列
        for (var i = 0; i < obj.columns.length; i++) {
            if (isEqual) {
                if (obj.columns[i].name == name) {
                    return true;
                }
            } else {
                if (obj.columns[i].name.indexOf(name) != -1) {
                    return true;
                }
            }
        }
        return false;
    },
    addParams: function (req, param, model) { //添加参数
        var queryparams = req.query, ignoreColumn = ",orderBy,orderValue,pageNum,pageSize,page";
        for (var key in queryparams) {
            if (ignoreColumn.indexOf(key) == -1 && !StringUtil.isEmpty(queryparams[key])) {
                var column = this.getColumn(model, key);
                if (column) {
                    param.push({
                        name: key,
                        type: (column.exact ? column.exact : "like"),
                        value: queryparams[key],
                        sqlValue: (column.exact ? "=?" : " like ?")
                    });
                }
            }
        }
    },
    getFormData: function (obj) { //获取form数据
        var rs = {_sqlSelect: [], _treeSelect: []};
        for (var i = 0; i < obj.columns.length; i++) {
            var o = obj.columns[i];
            if (o.htmlTag == "html.select") {
                var a = StringUtil.getKeyValues(o.htmlRemark, ",", ":");
                if (a) {
                    rs[o.name] = a;
                }
            } else if (o.htmlTag == "sql.select") {
                rs._sqlSelect.push({name: o.name, sql: o.htmlRemark});
            } else if (o.htmlTag == "tree.select") {
                rs._sqlSelect.push({name: o.name, sql: o.htmlRemark});
                rs._treeSelect.push({name: o.name, sql: o.htmlRemark});
            }
        }
        return rs;
    },
    checkSelectSql: function (_sql) { //检查sql
        let sql = _sql.toLowerCase();
        if(sql.indexOf(' as ') !== -1) return _sql;
        var tag1 = "select ";
        var i = sql.indexOf(tag1), j = sql.indexOf(" from ");
        if (i != -1 && j != -1) {
            var c = StringUtil.splits(sql.substring(i + tag1.length, j), ",", "", true, true);
            if (c) {
                if (c.length == 2) {
                    return sql.substring(0, i + tag1.length) + c[0] + " as label,CAST(" + c[1] + " AS CHAR) as value" + sql.substring(j);
                } else if (c.length == 3) {
                    return sql.substring(0, i + tag1.length) + c[0] + " as label,CAST(" + c[1] + " AS CHAR) as value,CAST(" + c[2] + " AS CHAR) as parentId" + sql.substring(j);
                }
            }
        }
        return sql;
    },
    getHtmlSqlSelect: function (rs, param, callback) {//获取下拉菜单
        var that = this;
        if (rs && param && callback) {
            async.forEachOf(param, function (item, index, callback2) {
                if (item.sql) {
                    DB.exec({
                        sql: that.checkSelectSql(item.sql),
                        param: null,
                        callback: function (row) {
                            if (row.status) {
                                rs[item.name] = row.data;
                                callback2(null);
                            } else {
                                callback2(null);
                            }
                        }
                    });
                } else {
                    callback2(null);
                }
            }, function (err) {
                if (err) {
                    console.log(err);
                }
                callback(rs);
            });
        }
    },
    checkHtmlTreeSelect: function (rs, param) { //检查树形下拉菜单
        if (param && param.length > 0) {
            for (var i = 0; i < param.length; i++) {
                var o = param[i];
                rs[o.name] = this.getHtmlTreeOptions(rs[o.name]);
            }
        }
    },
    getHtmlTreeOptions: function (data) { //获取树形下拉菜单
        var rs = [];
        if (data && data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                var o = data[i];
                if (StringUtil.isEmpty(o.parentId) || o.parentId == '0') {
                    o.level = 0;
                    rs.push(o);
                    this.getHtmlTreeOptions2(data, o, rs);
                }
            }
        }
        return rs;
    },
    getHtmlTreeOptions2: function (data, obj, rs) { //获取树形下拉菜单
        if (data && data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                var o = data[i];
                if (o.parentId == obj.value) {
                    o.level = obj.level + 1;
                    o.label = this.SELECT_OPTION_PREFIX[o.level] + o.label;
                    rs.push(o);
                    this.getHtmlTreeOptions2(data, o, rs);
                }
            }
        }
        return rs;
    },
    getViewFileName: function (tableName) { //获取view
        var filePath = Config.views + '/admin/table/' + tableName + '.html';
        if (fs.existsSync(filePath)) {
            return "admin/table/" + tableName;
        } else {
            return "admin/table";
        }
    }
};


module.exports = Views = {

    cache: {},
    viewRootPath: null,

    initMultiViewFolders: function (app, viewRootPath) {//初始化view目录
        this.viewRootPath = viewRootPath;
        app.set('views', this.getAllFolders(viewRootPath));
        this.lookup(app);
    },
    lookup: function (app) {//查找view
        var lookup_proxy = app.get('view').prototype.lookup, that = this;
        app.get('view').prototype.lookup = function (viewName) {
            var context, match;
            if (this.root instanceof Array) {
                for (var i = 0; i < this.root.length; i++) {
                    if (that.cache[viewName]) {
                        return that.cache[viewName];
                    }
                    var filepath = path.join(this.root[i], viewName);
                    try {
                        var file = fs.statSync(filepath);
                        if (file && file.isFile()) {
                            that.cache[viewName] = filepath;
                            that.loadRelativeViewName(filepath, that.viewRootPath);
                            return filepath;
                        }
                    } catch (e) {
                    }
                }
                return null;
            }
            return null;
        }
    },
    loadRelativeViewName: function (viewPath, viewRootPath) { //获取view文件
        var i = viewPath.indexOf(viewRootPath);
        if (i != -1 && viewPath != viewRootPath) {
            this.cache[viewPath.substring(viewRootPath.length + 1)] = viewPath;
        }
    },
    getAllFolders: function (path) {//获取所有目录
        var dirList = [];
        if (!fs.existsSync(path)) {
            console.error("The folder doesn't exist, please check folder " + path);
            return dirList;
        }
        this.listFolder(path, dirList);
        return dirList;
    },
    listFolder: function (path, dirList) {//遍历目录
        var dir = fs.readdirSync(path), that = this;
        dirList.push(path);
        dir.forEach(function (item) {
            var path2 = path + '/' + item;
            var file = fs.statSync(path2);
            if (file.isDirectory()) {
                dirList.push(path2);
                that.listFolder(path2, dirList);
            } else {
                that.loadRelativeViewName(path2, that.viewRootPath);
            }
        });
    }
};


module.exports = BaseDao = {

    getPrimaryKey: function (model) { //获取主键
        return model.columns[0].name;
    },
    isTrueDelete: function (obj) { //是否真删
        if (!obj.deleteCondition || obj.deleteCondition == "1=1") {
            return true;
        }
        return false;
    },
    getSql_create: function (obj) { //创建sql
        return "insert into " + obj.table + " set ?";
    },
    getSql_read: function (obj) { //读取sql
        return "select * from " + obj.table + " where " + obj.deleteCondition;
    },
    getSql_update: function (obj) { //修改sql
        return "update " + obj.table + " set ? where " + this.getPrimaryKey(obj) + "=?";
    },
    getSql_delete: function (obj) {  //删除sql
        return "update " + obj.table + " set delete_by=?,delete_at=now() where " + this.getPrimaryKey(obj) + "=?";
    },
    getSql_delete2: function (obj) { //删除sql
        return "delete from " + obj.table + " where " + this.getPrimaryKey(obj) + "=?";
    },
    getSql_count: function (obj) { //统计sql
        return "select count(*) from " + obj.table + " where " + obj.deleteCondition;
    },
    getCreateSqlParam: function (model, obj) { //创建sql参数
        var len = model.columns.length, rs = [];
        for (var i = 0; i < len; i++) {
            var o = model.columns[i];
            rs.push(obj[o.name]);
        }
        return rs;
    },
    getUpdateSqlParam: function (model, obj) { //修改sql参数
        var len = model.columns.length, rs = [];
        for (var i = 0; i < len; i++) {
            var o = model.columns[i];
            if (o.isPrimaryKey) {
                continue;
            }
            rs.push(obj[o.name]);
        }
        rs.push(obj[model.columns[0].name]);
        return rs;
    },
    getReadSqlParam: function (sql, param, id) { //读取sql参数
        var rs = {sql: sql, param: []};
        if (StringUtil.isArray(param)) {
            if (param.length == 1) {
                rs.param[0] = param;
            } else {
                var s = "", hasAnd = false, c = sql.toLowerCase();
                if (c.indexOf(" where ") == -1) {
                    rs.sql = rs.sql + " where";
                } else {
                    hasAnd = true;
                }
                for (var i = 0; i < param.length; i++) {
                    if (i % 2 == 0) {
                        if (i == 0 && !hasAnd) {
                            if (param[i].indexOf(" ") != -1) {
                                rs.sql += " " + param[i] + " ";
                            } else {
                                rs.sql += " " + param[i] + "=?";
                            }
                        } else {
                            if (param[i].indexOf(" ") != -1) {
                                rs.sql += " and " + param[i] + " ";
                            } else {
                                rs.sql += " and " + param[i] + "=?";
                            }
                        }
                    } else {
                        rs.param.push(param[i]);
                    }
                }
            }
        } else {
            if (typeof(param) != "undefined" && param != null) {
                var s = "", hasAnd = false, c = sql.toLowerCase();
                if (c.indexOf(" where ") == -1) {
                    rs.sql = rs.sql + " where " + id + "=?";
                } else {
                    if (c.indexOf(" id=? ") == -1) {
                        rs.sql = rs.sql + " and " + id + "=?";
                    }
                }
                rs.param[0] = param;
            }
        }
        return rs;
    },
    getQuerySqlParam: function (sql, param, orderBy, orderValue) { //查询sql参数
        var rs = {sql: sql, param: null};
        if (StringUtil.isArray(param)) {
            if (param.length == 1) {
                rs.sql = StringUtil.getSqlOrder(sql, param[0], orderBy, orderValue);
            } else {
                rs.param = [];
                var s = "";
                for (var i = 1; i < param.length; i++) {
                    if (i % 2 == 1) {
                        if (param[i].indexOf(" ") != -1) {
                            rs.sql += " " + param[i] + " ";
                        } else {
                            rs.sql += " and " + param[i] + "=?";
                        }
                    } else {
                        rs.param.push(param[i]);
                    }
                }
                rs.sql = StringUtil.getSqlOrder(rs.sql, param[0], orderBy, orderValue);
            }
        } else {
            rs.sql = StringUtil.getSqlOrder(sql, param, orderBy, orderValue);
        }
        return rs;
    },
    getDeleteSqlParam: function (sql_delete_false, sql_delete_true, obj, id, isTrueDelete) { //删除sql参数
        var rs = {sql: sql_delete_false, param: null};
        obj.id += ""
        if (isTrueDelete) {
            rs.sql = sql_delete_true;
            rs.param = [obj.id];
        } else {
            rs.param = [obj.deleteBy, obj.id];
        }
        return rs;
    },
    hasField: function (name, model) { //是否含该字段
        if (typeof(model) == "undefined" || !model) {
            model = this.model;
        }
        return model && model.columns && model.columns[name];
    },
    hasField2: function (name, model) { //是否含该字段
        if (typeof(model) == "undefined" || !model) {
            model = this.model;
        }
        if (model && model.columns) {
            for (var i = 0; i < model.columns.length; i++) {
                var o = model.columns[i];
                if (o.name == name) {
                    return true;
                }
            }
        }
        return false;
    },
    doCreate: function (dao, obj, callback) { //创建对象
        obj = StringUtil.checkProperties(obj, dao.model.columns);
        DB.exec({
            sql: dao.sql_create,
            param: obj,
            callback: callback
        });
    },
    doRead: function (dao, id, callback) {//读取对象
        var that = this;
        var o = this.getReadSqlParam(dao.sql_read, id, that.getPrimaryKey(dao.model));
        DB.exec({
            sql: o.sql,
            param: o.param,
            callback: function (rs) {
                if (rs.status) {
                    if (rs.data.length > 0) {
                        rs.data = rs.data[0];
                    } else {
                        rs.data = null;
                    }
                    if (callback) {
                        callback(rs);
                    }
                }
            }
        });
    },
    doUpdate: function (dao, obj, callback) { //修改对象
        var that = this;
        obj = StringUtil.checkProperties(obj, dao.model.columns);
        DB.exec({
            sql: dao.sql_update,
            param: [obj, obj[that.getPrimaryKey(dao.model)]],
            callback: callback
        });
    },
    doDelete: function (dao, obj, callback) { //删除对象
        var that = this;
        var o = this.getDeleteSqlParam(dao.sql_delete, dao.sql_delete2, obj, that.getPrimaryKey(dao.model), that.isTrueDelete(dao.model));
        DB.exec({
            sql: o.sql,
            param: o.param,
            callback: callback
        });
    },
    doQuery: function (dao, rows, orderBy, orderValue, callback) { //查询对象
        var o = this.getQuerySqlParam(dao.sql_read, rows, orderBy, orderValue);
        DB.exec({
            sql: o.sql,
            param: o.param,
            callback: callback
        });
    },
    doSearch: function (dao, orderBy, orderValue, currPage, pageSize, pageNum, param, callback) { //搜索对象
        var sqlwhere = StringUtil.getSqlWhere(param);
        var sqlOrder = StringUtil.getSqlOrder(" ", -1, orderBy, orderValue);
        var sqlCount = dao.sql_count + sqlwhere, that = this;
        var sql = dao.sql_read + sqlwhere + sqlOrder;
        var sqlParam = StringUtil.getSqlValues(param);
        DB.exec({
            sql: sql,
            sqlCount: sqlCount,
            param: sqlParam,
            page: {currPage: currPage, pageSize: pageSize, pageNum: pageNum},
            callback: callback
        });
    },
    doCreateAsync:async function (dao,obj) {
        obj = StringUtil.checkProperties(obj, dao.model.columns);

        let [error, data, result] = await DB.execAsync({
            sql: dao.sql_create,
            param: obj,
        });

        if (error) {
            return [error, null, result]
        } else {
            return [null, data, result]
        }
    },
    doReadAsync: async function (dao, id) {//读取对象
        let o = this.getReadSqlParam(dao.sql_read, id, this.getPrimaryKey(dao.model));

        let [error, data, result] = await DB.execAsync({
            sql: o.sql,
            param: o.param
        });

        if (error) {
            return [error, null, result]
        } else {
            return [null, data[0], result]
        }
    },
    load: function (model) {
        var that = this;
        var o = {

            model: model,
            sql_create: that.getSql_create(model),
            sql_read: that.getSql_read(model),
            sql_update: that.getSql_update(model),
            sql_delete: that.getSql_delete(model),
            sql_delete2: that.getSql_delete2(model),
            sql_count: that.getSql_count(model),

            hasField: function (name, model) { //是否有字段
                if (typeof(model) == "undefined" || !model) {
                    model = this.model;
                }
                return model && model.columns && model.columns[name];
            },
            getCreateSqlParam: function (obj) { //创建sql参数
                return that.getCreateSqlParam(model, obj);
            },
            getUpdateSqlParam: function (obj) { //修改sql参数
                return that.getUpdateSqlParam(model, obj);
            },
            doCreate: function (obj, callback) { //创建对象
                BaseDao.doCreate(this, obj, callback);
            },
            doRead: function (id, callback) { //读取对象
                BaseDao.doRead(this, id, callback);
            },
            doUpdate: function (obj, callback) { //修改对象
                BaseDao.doUpdate(this, obj, callback);
            },
            doDelete: function (obj, callback) { //删除对象
                BaseDao.doDelete(this, obj, callback);
            },
            doQuery: function (rows, orderBy, orderValue, callback) { //查询对象
                BaseDao.doQuery(this, rows, orderBy, orderValue, callback);
            },
            doSearch: function (orderBy, orderValue, currPage, pageSize, pageNum, sqlParam, callback) { //搜索对象
                BaseDao.doSearch(this, orderBy, orderValue, currPage, pageSize, pageNum, sqlParam, callback);
            },
            doCreateAsync: function (obj) {
                return BaseDao.doCreateAsync(this,obj);
            },
            doReadAsync: function (id) { //读取对象
                return BaseDao.doReadAsync(this, id);
            },
        };
        return o;
    }

};

module.exports = BaseController = {

    load: function (dao) {
        var o = {
            dao: dao,
            doSave: function (req, res, next) { //保存对象
                var id = StringUtil.getParam(req, "id", "");
                if (StringUtil.isEmpty(id) || id == '0') {
                    if (dao.model && !dao.model.isAutoIncrement) {
                        req.body.id = StringUtil.getId();
                    } else {
                        req.body.id = "";
                    }
                    if (dao.hasField("create_at")) {
                        req.body.create_at = StringUtil.getDateString();
                        // req.body.create_by = SessionUtil.getUserId(req);
                        req.body.create_by = req.user ? req.user.id : 0;
                        req.body.update_at = req.body.create_at;
                        req.body.update_by = req.body.create_by;
                        req.body.delete_by = null;
                        req.body.delete_at = null;
                    } else {
                        req.body.create_at = StringUtil.getDateString();
                        // req.body.create_by = SessionUtil.getUserId(req);
                        req.body.create_by = req.user ? req.user.id : 0;
                        req.body.update_at = req.body.create_at;
                        req.body.update_by = req.body.create_by;
                        req.body.delete_by = null;
                        req.body.delete_at = null;
                    }
                    req.body.seq = StringUtil.getParam(req, "seq", 0);
                    dao.doCreate(req.body, function (result) {
                        if (result && result.status && req.body.id == "") {
                            req.body.id = result.data.insertId;
                        }
                        res.json(req.body);
                    }, null);
                } else {
                    if (dao.hasField("create_at")) {
                        req.body.update_at = StringUtil.getDateString();
                        // req.body.update_by = SessionUtil.getUserId(req);
                        req.body.update_by = req.user ? req.user.id : 0;
                        ;
                    } else {
                        req.body.update_at = StringUtil.getDateString();
                        // req.body.update_by = SessionUtil.getUserId(req);
                        req.body.update_by = req.user ? req.user.id : 0;
                    }
                    dao.doUpdate(req.body, function (result) {
                        res.json(req.body);
                    }, null);
                }
            },
            doRead: function (req, res, next) { //读取对象
                dao.doRead(req.params.id, function (result) {
                    res.json(result);
                });
            },
            doDelete: function (req, res, next) {//删除对象
                dao.doDelete({id: req.params.id, deleteBy: req.user ? req.user.id : 0}, function (result) {
                    res.json(result);
                }, null);
            },
            doSearch: function (req, res, next) {//搜索对象
                var param = [];
                TableUtil.addParams(req, param, dao.model);
                var page = StringUtil.getParam(req, "page", 1);
                var pageSize = StringUtil.getParam(req, "pageSize", 10);
                var pageNum = StringUtil.getParam(req, "pageNum", 10);
                var orderBy = StringUtil.getParam(req, "orderBy", "id");
                var orderValue = StringUtil.getParam(req, "orderValue", "desc");
                dao.doSearch(orderBy, orderValue, page, pageSize, pageNum, param, function (result) {
                    res.json(result.data);
                }, null);
            }
        };
        return o;
    }

};

module.exports = ProcessUtil = {

    exec: function (cmd, callback) { //执行命令
        last = exec(cmd);
        last.stdout.on('data', function (data) {
            console.log('标准输出：' + data);
            if (callback) callback();
        });

        last.on('exit', function (code) {
            console.log('子进程已关闭，代码：' + code);
            //if(callback) callback();
        });

    }

};

module.exports = AnnotatorUtil = {

    getAnnotatorData: function (obj) { //获取电子书提示
        return {
            "id": obj.id,
            "quote": obj.quote,
            "ranges": [{
                "start": obj.start,
                "startOffset": obj.startOffset,
                "end": obj.end,
                "endOffset": obj.endOffset
            }],
            parentId: obj.parentId,
            type: obj.type,
            "links": [{"type": "text/html", "rel": "alternate", "href": "/platform/annotators/" + obj.id}],
            "uri": obj.uri,
            "text": obj.text,
            "create_by": obj.create_by,
            "create_at": obj.create_at
        };
    },
    getAnnotatorDatas: function (objs) { //获取多个电子书提示
        var o = null;
        if (objs) {
            o = [];
            for (var i in objs) {
                o[i] = this.getAnnotatorData(objs[i]);
            }
        }
        return o;
    }

};

module.exports = CalculationUtil = {
    /**
     ** 加法函数，用来得到精确的加法结果
     ** 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。
     ** 调用：accAdd(arg1,arg2)
     ** 返回值：arg1加上arg2的精确结果
     **/
    accAdd: function (arg1, arg2) {
        if (isNaN(arg1)) {
            arg1 = 0;
        }
        if (isNaN(arg2)) {
            arg2 = 0;
        }
        arg1 = Number(arg1);
        arg2 = Number(arg2);
        var r1, r2, m, c;
        try {
            r1 = arg1.toString().split(".")[1].length;
        }
        catch (e) {
            r1 = 0;
        }
        try {
            r2 = arg2.toString().split(".")[1].length;
        }
        catch (e) {
            r2 = 0;
        }
        c = Math.abs(r1 - r2);
        m = Math.pow(10, Math.max(r1, r2));
        if (c > 0) {
            var cm = Math.pow(10, c);
            if (r1 > r2) {
                arg1 = Number(arg1.toString().replace(".", ""));
                arg2 = Number(arg2.toString().replace(".", "")) * cm;
            } else {
                arg1 = Number(arg1.toString().replace(".", "")) * cm;
                arg2 = Number(arg2.toString().replace(".", ""));
            }
        } else {
            arg1 = Number(arg1.toString().replace(".", ""));
            arg2 = Number(arg2.toString().replace(".", ""));
        }
        return (arg1 + arg2) / m;
    },

    /**
     ** 减法函数，用来得到精确的减法结果
     ** 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。
     ** 调用：accSub(arg1,arg2)
     ** 返回值：arg1减去arg2的精确结果
     **/
    accSub: function (arg1, arg2) {
        if (isNaN(arg1)) {
            arg1 = 0;
        }
        if (isNaN(arg2)) {
            arg2 = 0;
        }
        arg1 = Number(arg1);
        arg2 = Number(arg2);

        var r1, r2, m, n;
        try {
            r1 = arg1.toString().split(".")[1].length;
        }
        catch (e) {
            r1 = 0;
        }
        try {
            r2 = arg2.toString().split(".")[1].length;
        }
        catch (e) {
            r2 = 0;
        }
        m = Math.pow(10, Math.max(r1, r2)); //last modify by deeka //动态控制精度长度
        n = (r1 >= r2) ? r1 : r2;
        return ((arg1 * m - arg2 * m) / m).toFixed(n);
    },

    /**
     ** 乘法函数，用来得到精确的乘法结果
     ** 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。
     ** 调用：accMul(arg1,arg2)
     ** 返回值：arg1乘以 arg2的精确结果
     **/
    accMul: function (arg1, arg2) {
        if (isNaN(arg1)) {
            arg1 = 0;
        }
        if (isNaN(arg2)) {
            arg2 = 0;
        }
        arg1 = Number(arg1);
        arg2 = Number(arg2);

        var m = 0, s1 = arg1.toString(), s2 = arg2.toString();
        try {
            m += s1.split(".")[1].length;
        }
        catch (e) {
        }
        try {
            m += s2.split(".")[1].length;
        }
        catch (e) {
        }
        return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);
    },

    /**
     ** 除法函数，用来得到精确的除法结果
     ** 说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。
     ** 调用：accDiv(arg1,arg2)
     ** 返回值：arg1除以arg2的精确结果
     **/
    accDiv: function (arg1, arg2) {
        if (isNaN(arg1)) {
            arg1 = 0;
        }
        if (isNaN(arg2)) {
            arg2 = 0;
        }
        arg1 = Number(arg1);
        arg2 = Number(arg2);

        var t1 = 0, t2 = 0, r1, r2;
        try {
            t1 = arg1.toString().split(".")[1].length;
        }
        catch (e) {
        }
        try {
            t2 = arg2.toString().split(".")[1].length;
        }
        catch (e) {
        }
        with (Math) {
            r1 = Number(arg1.toString().replace(".", ""));
            r2 = Number(arg2.toString().replace(".", ""));
            return (r1 / r2) * pow(10, t2 - t1);
        }
    },
};